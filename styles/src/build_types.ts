import * as fs from "fs/promises"
import * as fsSync from "fs"
import * as path from "path"
import { compile } from "json-schema-to-typescript"

const BANNER = `/*
* This file is autogenerated
*/\n\n`
const dirname = __dirname

async function main() {
    const schemas_path = path.join(dirname, "../../", "crates/theme/schemas")
    const schema_files = (await fs.readdir(schemas_path)).filter((x) =>
        x.endsWith(".json")
    )

    const compiled_types = new Set()

    for (const filename of schema_files) {
        const file_path = path.join(schemas_path, filename)
        const file_contents = await fs.readFile(file_path)
        const schema = JSON.parse(file_contents.toString())
        const compiled = await compile(schema, schema.title, {
            bannerComment: "",
        })
        const each_type = compiled.split("export")
        for (const type of each_type) {
            if (!type) {
                continue
            }
            compiled_types.add("export " + type.trim())
        }
    }

    const output = BANNER + Array.from(compiled_types).join("\n\n")
    const output_path = path.join(dirname, "../../styles/src/types/zed.ts")

    try {
        const existing = await fs.readFile(output_path)
        if (existing.toString() == output) {
            // Skip writing if it hasn't changed
            console.log("Schemas are up to date")
            return
        }
    } catch (e) {
        if (e.code !== "ENOENT") {
            throw e
        }
    }

    const types_dic = path.dirname(output_path)
    if (!fsSync.existsSync(types_dic)) {
        await fs.mkdir(types_dic)
    }
    await fs.writeFile(output_path, output)
    console.log(`Wrote Typescript types to ${output_path}`)
}

export async function build_types() {
    return main().catch((e) => {
        console.error(e)
        process.exit(1)
    })
}
